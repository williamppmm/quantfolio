1) Clonar e instalar dependencias
# Ubícate donde guardas tus proyectos
cd C:\

# Clonar (si no lo tienes ya)
git clone https://github.com/williamppmm/quantfolio.git portfolio-manager
cd C:\portfolio-manager

# Crear entorno y paquetes
poetry install


Si es la primera vez que abres el repo en esta máquina, ejecuta también:

poetry config virtualenvs.in-project true
poetry env use 3.11

2) Variables de entorno

Crea un archivo .env en la raíz del proyecto (C:\portfolio-manager\.env) con:

DATABASE_URL=postgresql+asyncpg://quant:quant@localhost:5432/quantfolio


No lo subas a git (añádelo a .gitignore si no está).

3) Base de datos local (Postgres en Docker)
(Una sola vez) Crear y levantar Postgres 16
docker volume create quantfolio_pgdata

docker run -d --name quantfolio-postgres `
  -e POSTGRES_USER=quant `
  -e POSTGRES_PASSWORD=quant `
  -e POSTGRES_DB=quantfolio `
  -p 5432:5432 `
  -v quantfolio_pgdata:/var/lib/postgresql/data `
  postgres:16

(Cada vez que inicies el día) Asegurar que está corriendo
docker start quantfolio-postgres
docker ps    # Debe verse "quantfolio-postgres" en UP y puerto 5432 publicado

Migraciones (solo si cambian modelos)
# Crear migración (cuando cambies modelos)
poetry run alembic revision -m "mensaje" --autogenerate

# Aplicar migraciones pendientes
poetry run alembic upgrade head

4) Levantar la API

En una nueva terminal en la carpeta del proyecto:

poetry run uvicorn backend.app.main:app --reload --port 8000


Deja esta ventana abierta (aquí verás logs/errores).

Si todo va bien, abre:

Salud: http://127.0.0.1:8000/health

Documentación (Swagger): http://127.0.0.1:8000/docs

5) Endpoints útiles (prueba rápida)
Precios en vivo (Yahoo Finance)

Último precio:

GET http://127.0.0.1:8000/prices/VOO/last


Rango histórico:

GET http://127.0.0.1:8000/prices/VOO/range?start=2025-01-01&end=2025-09-10&interval=1d

Métricas

Básicas:

GET http://127.0.0.1:8000/metrics/VOO/basic?start=2025-01-01&end=2025-09-10&rf=0.02


Avanzadas:

GET http://127.0.0.1:8000/metrics/VXUS/advanced?start=2025-06-01&rf=0.02&mar=0.0

Señales técnicas
GET http://127.0.0.1:8000/signals/VOO/tech?start=2025-01-01&end=2025-09-10&window=60&fast=20&slow=50&rsi_period=14

Ingesta a BD (UPSERT) y lectura desde BD

Ingesta (POST; usa Swagger o PowerShell):

POST http://127.0.0.1:8000/ingest/VOO?start=2025-01-01&end=2025-09-10&interval=1d


PowerShell:

irm "http://127.0.0.1:8000/ingest/VOO?start=2025-01-01&end=2025-09-10&interval=1d" -Method Post


Leer desde BD:

GET http://127.0.0.1:8000/prices/VOO/db/range?start=2025-01-01&end=2025-09-10

Flujo diario recomendado (resumen)

Arrancar Postgres:

docker start quantfolio-postgres


Entrar al proyecto:

cd C:\portfolio-manager


Activar/usar Poetry (no necesitas activar manualmente .venv):

poetry install   # solo si agregaste paquetes nuevos


Levantar API:

poetry run uvicorn backend.app.main:app --reload --port 8000


Probar en Swagger:

http://127.0.0.1:8000/docs

Tips de VS Code (opcional)

Abre carpeta del proyecto en VS Code.

Extensión Python y Pylance recomendadas.

Selecciona el intérprete de Poetry: Ctrl+Shift+P → “Python: Select Interpreter” → .venv.

Puedes crear una configuración de Run & Debug para ejecutar Uvicorn desde VS Code; si lo quieres, lo añadimos luego.

Problemas comunes

No carga /docs → el server no está corriendo. Revisa que lanzaste:

poetry run uvicorn backend.app.main:app --reload --port 8000


Error de conexión a Postgres → confirma:

docker ps  # contenedor "Up"


y que .env tenga la URL correcta.

El navegador no muestra nada en http://localhost:5432 → es normal; Postgres no sirve HTTP.

POST vs GET → /ingest/{ticker} es POST. Úsalo en Swagger o con irm -Method Post.